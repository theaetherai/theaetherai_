generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                 @unique
  firstname             String?
  lastname              String?
  createdAt             DateTime               @default(now())
  clerkid               String                 @unique
  image                 String?
  trial                 Boolean                @default(false)
  firstView             Boolean                @default(false)
  role                  String                 @default("student")
  aiTutorInteractions   AiTutorInteraction[]
  assignmentSubmissions AssignmentSubmission[]
  comment               Comment[]
  ownedCourses          Course[]
  enrollments           Enrollment[]
  feedback              Feedback[]
  reciever              Invite[]               @relation("reciever")
  sender                Invite[]               @relation("sender")
  progress              LearningProgress[]
  lessonProgress        LessonProgress[]
  studio                Media?
  members               Member[]
  notification          Notification[]
  quizAttempts          QuizAttempt[]
  ratings               Rating[]
  subscription          Subscription?
  videos                Video[]
  workspace             WorkSpace[]
}

model Comment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment   String
  commentId String?   @db.Uuid
  userId    String?   @db.Uuid
  videoId   String?   @db.Uuid
  createdAt DateTime  @default(now())
  Comment   Comment?  @relation("reply", fields: [commentId], references: [id])
  reply     Comment[] @relation("reply")
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Video     Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
  User       User?             @relation(fields: [userId], references: [id])
}

model Media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  userId String? @unique @db.Uuid
  User   User?   @relation(fields: [userId], references: [id])
}

model WorkSpace {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      Type
  name      String
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  folders   Folder[]
  invite    Invite[]
  members   Member[]
  videos    Video[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Folder {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  workSpaceId String?    @db.Uuid
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  videos      Video[]
}

model Video {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String?    @default("Untilted Video")
  description      String?    @default("No Description")
  source           String     @unique
  createdAt        DateTime   @default(now())
  folderId         String?    @db.Uuid
  userId           String?    @db.Uuid
  processing       Boolean    @default(true)
  workSpaceId      String?    @db.Uuid
  views            Int        @default(0)
  summery          String?
  aiKeywords       String[]
  processingError  String?
  processingStatus String?
  summary          String?
  transcript       String?
  Comment          Comment[]
  lessons          Lesson[]
  Folder           Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  User             User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkSpace        WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
}

model Member {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?    @db.Uuid
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  workSpaceId String?    @db.Uuid
  User        User?      @relation(fields: [userId], references: [id])
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String? @db.Uuid
  content String
  User    User?   @relation(fields: [userId], references: [id])
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId    String?    @db.Uuid
  recieverId  String?    @db.Uuid
  content     String
  workSpaceId String?    @db.Uuid
  accepted    Boolean    @default(false)
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
}

model Course {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  description      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String?      @db.Uuid
  bestseller       Boolean      @default(false)
  category         String?
  discountPrice    Decimal?     @db.Decimal(10, 2)
  featured         Boolean      @default(false)
  level            String?
  objectives       String[]
  popular          Boolean      @default(false)
  price            Decimal?     @db.Decimal(10, 2)
  published        Boolean      @default(false)
  requirements     String[]
  shortDescription String?
  targetAudience   String?
  thumbnailUrl     String?
  totalDuration    Int?
  User             User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags             CourseTag[]
  enrollments      Enrollment[]
  lessons          Lesson[]
  ratings          Rating[]
  sections         Section[]
}

model Rating {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  userId    String?  @db.Uuid
  courseId  String?  @db.Uuid
  Course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
}

model CourseTag {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  courseId String? @db.Uuid
  Course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Section {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String?  @db.Uuid
  description String?
  lessons     Lesson[]
  Course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  content               String?
  order                 Int
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  courseId              String?                @db.Uuid
  videoId               String?                @db.Uuid
  duration              Int?
  sectionId             String?                @db.Uuid
  description           String?
  previewable           Boolean                @default(false)
  dueDate               DateTime?
  fileTypes             String[]
  maxFileSize           Int?
  maxFiles              Int?
  passingScore          Int?
  questions             Json?
  rubric                Json?
  timeLimit             Int?
  type                  LessonType             @default(video)
  aiTutorInteractions   AiTutorInteraction[]
  assignmentSubmissions AssignmentSubmission[]
  learningProgress      LearningProgress[]
  course                Course?                @relation(fields: [courseId], references: [id])
  section               Section?               @relation(fields: [sectionId], references: [id])
  video                 Video?                 @relation(fields: [videoId], references: [id])
  progress              LessonProgress[]
  quizAttempts          QuizAttempt[]
}

model LessonProgress {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  lessonId     String   @db.Uuid
  progress     Int      @default(0)
  completed    Boolean  @default(false)
  lastAccessed DateTime @default(now())
  lesson       Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model QuizAttempt {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  lessonId  String   @db.Uuid
  answers   Json
  score     Int
  passed    Boolean  @default(false)
  timeSpent Int?
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssignmentSubmission {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  lessonId    String    @db.Uuid
  content     String?
  fileUrls    Json?
  status      String    @default("submitted")
  submittedAt DateTime  @default(now())
  grade       Int?
  feedback    String?
  gradedAt    DateTime?
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now())
  userId      String?   @db.Uuid
  courseId    String?   @db.Uuid
  completed   Boolean   @default(false)
  completedAt DateTime?
  Course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningProgress {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  completed      Boolean  @default(false)
  userId         String?  @db.Uuid
  lessonId       String?  @db.Uuid
  watchedSeconds Int      @default(0)
  lesson         Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  text      String
  User      User?    @relation(fields: [userId], references: [id])
}

model AiTutorInteraction {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  lessonId  String?  @db.Uuid
  prompt    String
  response  String
  context   String
  rating    Int?
  createdAt DateTime @default(now())
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Type {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum LessonType {
  video
  text
  quiz
  assignment
}
